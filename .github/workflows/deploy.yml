name: CI/CD to EC2

on:
  push:
    branches: [ "main" ]  

jobs:
  build:

    runs-on: [ubuntu-latest]

    permissions:
      id-token: write #require for OIDC
      contents: read #allow Github to read the repo

    steps:
    - name: Checkout code
      uses: actions/checkout@v4      
  
    - name: Set up Docker
      run: docker --version

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{secrets.DOCKER_USERNAME}}/bookwise-app:latest .

    - name: Build image push to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/bookwise-app:latest 

    - name: Configure AWS credential
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{secrets.AWS_GITHUB_ROLE}}
        aws-region: ap-southeast-2
    
    # create target folder to store docker-compose
    - name: Copy docker-compose to EC2
      uses: appleboy/ssh-action@master
      with: 
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}        
        script: |
          mkdir -p /home/ubuntu/myapp
     
    # upload docker-compose.yml to target folder
    - name: Copy docker-compose.yml to EC2
      uses: appleboy/scp-action@master
      with: 
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: docker-compose-prod.yml        
        target: /home/ubuntu/myapp/

    # SSH to EC2 and deploy
    - name: Deploy on EC2 via SSH
      uses: appleboy/ssh-action@master
      env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/myapp
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          sudo docker compose -f docker-compose-prod.yml pull
          sudo docker compose -f docker-compose-prod.yml down --remove-orphans || true
          sudo docker compose -f docker-compose-prod.yml up -d
        
   
